dM_carcass <- Q_carcass*Free*(C_art - C_carcass/P_carcass)
# Urine storage
dM_storage <- Cl_urine*M_kidney - f_reab_urine*M_storage - Q_urine*C_storage
# Urine
dM_urine <- Q_urine*C_storage
# Feces
dM_feces <- Cl_feces*((1-a)*M_lumen + M_lumen_2)
Mass_balance <- M_input - (M_art + M_venous + M_gills + M_lumen + M_lumen_2 +
M_viscera + M_liver + M_kidney + M_muscle +
M_skin + M_carcass + M_storage + M_urine + M_feces)
return(list(c('dM_art'=dM_art, 'dM_venous'=dM_venous,
'dM_gills'=dM_gills, 'dM_lumen'=dM_lumen, 'dM_lumen_2'=dM_lumen_2,
'dM_viscera'=dM_viscera, 'dM_Liver'=dM_Liver,
'dM_kidney'=dM_kidney, 'dM_muscle'=dM_muscle,
'dM_skin'=dM_skin, 'dM_carcass'=dM_carcass, 'dM_storage'=dM_storage,
'dM_urine'=dM_urine, 'dM_feces'=dM_feces, 'dM_input'=dM_input),
'C_Gills'=C_gills, 'C_Viscera'=C_viscera,
'C_Liver'=C_liver, 'C_Kidney'=C_kidney, 'C_Muscle'=C_muscle,
'C_Skin'=C_skin, 'C_Carcass'=C_carcass, 'C_Lumen'=C_lumen,
'C_Blood'=C_blood*plasma,
'Mass_balance'=Mass_balance, 'BW'=BW))
})
}
obj_f <- function(x, constant_theta, constant_theta_name, params_names, constant_params=NULL,
data_df, errors_df, user.input){
if(!is.null(constant_theta)){
if(length(constant_theta_name) != length(constant_theta)){
stop("The constant_theta_name vector must be of equal length with the constant_theta vector")
}
for (j in 1:length(constant_theta)){
assign(constant_theta_name[j], constant_theta[[j]])
}
}
# Assign the values of the x vector to the corresponding parameters
if(length(x) != length(params_names)){
stop("The params_names must be of equal length with the x vector")
}
for (k in 1:length(x)) {
assign(params_names[k], x[k])
}
if(!is.null(constant_params)){
for (k in 1:length(constant_params)) {
assign(names(constant_params)[k], constant_params[[k]])
}
}
params <- create.params(user.input)
inits <- create.inits(params)
events <- create.events(params)
sample_time <- seq(0,56*24,2)
# Time of measurement of selected PFAS
exp_time <- data_df[,1]
pbk_params <- c('P_liver'=P_liver[[1]], 'P_muscle'=P_muscle[[1]], 'P_kidney'=P_kidney[[1]],
'P_skin'=P_skin[[1]], 'P_gills'=P_gills[[1]], 'P_carcass'=P_carcass[[1]],
'P_viscera'=P_viscera[[1]], 'Cl_feces'=Cl_feces[[1]], 'Ku'=Ku[[1]])
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = c(pbk_params,params),
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
output_variables <- c('C_Liver', 'C_Blood',
'C_Skin', 'C_Muscle', 'C_Gills',
'C_Kidney', 'C_Carcass')
if(sum(solution$time %in% exp_time) == length(exp_time)){
results <- solution[which(solution$time %in% exp_time), output_variables]*1000
}else{
stop(print("Length of predictions is not equal to the length of data"))
}
#score <- c()
# Estimate WSSR for every output variable with available data
#score <- PBKtools::WSSR(list(data_df[1,i+1]), list(results[1,i]), list(errors_df[1,i+1]))
score <- PBKtools::PBKOF(list(data_df), list(results))
return(score)
}
parallel_func <- function(substance){
data_df <- data_list[[substance]]
# Consider a Coefficient of Variation of the data points (CV = sd/mean)
CV <- 10/100
errors_df <- data.frame(matrix(NA, nrow = nrow(data_df), ncol = ncol(data_df)))
for (i in 1:nrow(data_df)) {
for (j in 2:ncol(data_df)) {
set.seed(100)
errors_df[i,j] <- abs(rnorm(1, data_df[i,j]*CV, 1))
}
}
errors_df[,1] <- data_df[,1]
colnames(errors_df) <- colnames(data_df)
opts <- list( "algorithm" = "NLOPT_LN_SBPLX", #"NLOPT_LN_NEWUOA",  #"NLOPT_LN_SBPLX" ,
"xtol_rel" = 1e-05,
"ftol_rel" = 1e-05,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 5000,
"print_level" = 1 )
thetas_names <- c('P_liver', 'P_muscle', 'P_kidney',
'P_skin', 'P_gills', 'P_carcass', 'P_viscera',
'Cl_feces', 'Ku')
set.seed(0)
x0 = runif(length(thetas_names))
lb = rep(1e-10, length(x0))
ub = rep(1e+04, length(x0))
user.input <- list('substance'=substance,
'Texp'=15,
'admin.dose_dietary'=admin.dose_dietary,
'admin.time_dietary'=admin.time_dietary)
sink(file= paste0(substance, '.txt'), append = F)
optimization <- nloptr::nloptr(x0 = x0,
eval_f = obj_f,
lb	= lb,
ub = ub,
opts = opts,
constant_theta = NULL,
constant_theta_name = NULL,
params_names = thetas_names,
constant_params=NULL,
data_df = data_df,
errors_df = errors_df,
user.input=user.input)
cat("EXIT")
sink()
return(list('substance'=substance,
'optimization'=optimization))
}
# Define inputs and load necessary data
# Experimental data from Falk et al.2015
#---------------------------------------
# The concentrations in the data are given in ug PFAS/kg tissue units.
# The time is given in days and will be transformed in hours, to be compatible
# with the model
# Directory of folder with saved data files
data_dir <- '/Users/vassilis/Documents/GitHub/PFAS_PBK_models/PFAS Rainbow trout PBK/PFAS_Data/Falk et al.2015'
# Load PFOS data
#---------------
PFOS_data <- openxlsx::read.xlsx(paste0(data_dir,'/','PFOS.xlsx'))
PFOS_data$Time <- PFOS_data$Time*24
# Load PFOA data
#---------------
PFOA_data <- openxlsx::read.xlsx(paste0(data_dir,'/','PFOA.xlsx'))
PFOA_data$Time <- PFOA_data$Time*24
# Load PFBS data
#---------------
PFBS_data <- openxlsx::read.xlsx(paste0(data_dir,'/','PFBS.xlsx'))
PFBS_data$Time <- PFBS_data$Time*24
# Load PFHxS data
#----------------
PFHxS_data <- openxlsx::read.xlsx(paste0(data_dir,'/','PFHxS.xlsx'))
PFHxS_data$Time <- PFHxS_data$Time*24
# Load PFNA data
#----------------
PFNA_data <- openxlsx::read.xlsx(paste0(data_dir,'/','PFNA.xlsx'))
PFNA_data$Time <- PFNA_data$Time*24
# Put all data in a list
data_list <- list('PFOS'=PFOS_data, 'PFOA'=PFOA_data,
'PFBS'=PFBS_data, 'PFHxS'=PFHxS_data,
'PFNA'=PFNA_data)
substances <- c("PFOS",  "PFOA",  "PFBS",  "PFHxS", "PFNA" )
Texp <- 15
fish_weight <- function(time){
x <- c(0,28,56)*24
y <- c(314, 655, 808)
if(time <= x[1]){
w = y[1]
}else if(time >= x[3]){
w = y[3]
}else if(time >= x[1] & time < x[2]){
w = approx(x=x[1:2],y=y[1:2], xout = time)$y
}else if(time >= x[2] & time < x[3]){
w = approx(x=x[2:3],y=y[2:3], xout = time)$y
}
return(w)
}
# Time points of added food
admin.time_dietary <- seq(0,27*24,24)
# Calculate fish weight over time (g)
fish_weights <- unlist(lapply(admin.time_dietary, fish_weight))
# Multiply fish_weights * g daily_food_intake/g of BW * Concentration (ug/g of food)
admin.dose_dietary <- fish_weights*2.6/100*500/1000
exported_to_cluster <- list("fish_weight"=fish_weight,
"create.inits"=create.inits,
"create.params"=create.params,
"create.events"=create.events,
"ode.func"=ode.func,
"Texp"=Texp,
"admin.dose_dietary"=admin.dose_dietary,
"admin.time_dietary"=admin.time_dietary,
'data_list'=data_list)
input_substances <- substances
start_time = Sys.time()
library(parallel)
cl = makeCluster(length(substances))
clusterExport(cl=cl, c(names(exported_to_cluster),"obj_f"))
output <- parLapply(cl, input_substances, parallel_func)
substance = substances[1]
substance
data_df <- data_list[[substance]]
data_df
# Consider a Coefficient of Variation of the data points (CV = sd/mean)
CV <- 10/100
errors_df <- data.frame(matrix(NA, nrow = nrow(data_df), ncol = ncol(data_df)))
for (i in 1:nrow(data_df)) {
for (j in 2:ncol(data_df)) {
set.seed(100)
errors_df[i,j] <- abs(rnorm(1, data_df[i,j]*CV, 1))
}
}
errors_df[,1] <- data_df[,1]
colnames(errors_df) <- colnames(data_df)
opts <- list( "algorithm" = "NLOPT_LN_SBPLX", #"NLOPT_LN_NEWUOA",  #"NLOPT_LN_SBPLX" ,
"xtol_rel" = 1e-05,
"ftol_rel" = 1e-05,
"ftol_abs" = 0.0,
"xtol_abs" = 0.0 ,
"maxeval" = 5000,
"print_level" = 1 )
thetas_names <- c('P_liver', 'P_muscle', 'P_kidney',
'P_skin', 'P_gills', 'P_carcass', 'P_viscera',
'Cl_feces', 'Ku')
set.seed(0)
x0 = runif(length(thetas_names))
lb = rep(1e-10, length(x0))
ub = rep(1e+04, length(x0))
user.input <- list('substance'=substance,
'Texp'=15,
'admin.dose_dietary'=admin.dose_dietary,
'admin.time_dietary'=admin.time_dietary)
constant_theta = NULL
constant_theta_name = NULL
params_names = thetas_names
constant_params=NULL
if(!is.null(constant_theta)){
if(length(constant_theta_name) != length(constant_theta)){
stop("The constant_theta_name vector must be of equal length with the constant_theta vector")
}
for (j in 1:length(constant_theta)){
assign(constant_theta_name[j], constant_theta[[j]])
}
}
# Assign the values of the x vector to the corresponding parameters
if(length(x) != length(params_names)){
stop("The params_names must be of equal length with the x vector")
}
x=x0
x
if(!is.null(constant_theta)){
if(length(constant_theta_name) != length(constant_theta)){
stop("The constant_theta_name vector must be of equal length with the constant_theta vector")
}
for (j in 1:length(constant_theta)){
assign(constant_theta_name[j], constant_theta[[j]])
}
}
# Assign the values of the x vector to the corresponding parameters
if(length(x) != length(params_names)){
stop("The params_names must be of equal length with the x vector")
}
for (k in 1:length(x)) {
assign(params_names[k], x[k])
}
if(!is.null(constant_params)){
for (k in 1:length(constant_params)) {
assign(names(constant_params)[k], constant_params[[k]])
}
}
params <- create.params(user.input)
inits <- create.inits(params)
events <- create.events(params)
sample_time <- seq(0,56*24,2)
# Time of measurement of selected PFAS
exp_time <- data_df[,1]
pbk_params <- c('P_liver'=P_liver[[1]], 'P_muscle'=P_muscle[[1]], 'P_kidney'=P_kidney[[1]],
'P_skin'=P_skin[[1]], 'P_gills'=P_gills[[1]], 'P_carcass'=P_carcass[[1]],
'P_viscera'=P_viscera[[1]], 'Cl_feces'=Cl_feces[[1]], 'Ku'=Ku[[1]])
solution <- data.frame(deSolve::ode(times = sample_time,  func = ode.func, y = inits, parms = c(pbk_params,params),
events = events,
method="lsodes",rtol = 1e-03, atol = 1e-03))
output_variables <- c('C_Liver', 'C_Blood',
'C_Skin', 'C_Muscle', 'C_Gills',
'C_Kidney', 'C_Carcass')
if(sum(solution$time %in% exp_time) == length(exp_time)){
results <- solution[which(solution$time %in% exp_time), output_variables]*1000
}else{
stop(print("Length of predictions is not equal to the length of data"))
}
results
data_df
head(solution)
data_df
if(sum(solution$time %in% exp_time) == length(exp_time)){
results <- solution[which(solution$time %in% exp_time), output_variables]*1000
colnames(results) <- c('Time', 'Liver', 'Blood', 'Skin', 'Muscle', 'Gills',
'Kidney', 'Carcass')
}else{
stop(print("Length of predictions is not equal to the length of data"))
}
output_variables
output_variables <- c('time', 'C_Liver', 'C_Blood',
'C_Skin', 'C_Muscle', 'C_Gills',
'C_Kidney', 'C_Carcass')
if(sum(solution$time %in% exp_time) == length(exp_time)){
results <- solution[which(solution$time %in% exp_time), output_variables]*1000
colnames(results) <- c('Time', 'Liver', 'Blood', 'Skin', 'Muscle', 'Gills',
'Kidney', 'Carcass')
}else{
stop(print("Length of predictions is not equal to the length of data"))
}
results
if(sum(solution$time %in% exp_time) == length(exp_time)){
results <- solution[which(solution$time %in% exp_time), output_variables]*1000
results[,1] <- results[,1]/1000 #reverse the conversion of time
colnames(results) <- c('Time', 'Liver', 'Blood', 'Skin', 'Muscle', 'Gills',
'Kidney', 'Carcass')
}else{
stop(print("Length of predictions is not equal to the length of data"))
}
results
if(sum(solution$time %in% exp_time) == length(exp_time)){
results <- solution[which(solution$time %in% exp_time), output_variables]
colnames(results) <- c('Time', 'Liver', 'Blood', 'Skin', 'Muscle', 'Gills',
'Kidney', 'Carcass')
}else{
stop(print("Length of predictions is not equal to the length of data"))
}
# score <- c()
# # Estimate WSSR for every output variable with available data
# for (i in 1:length(output_variables)) {
#   #score[i] <- PBKtools::WSSR(list(data_df[1,i+1]), list(results[1,i]), list(errors_df[1,i+1]))
#   score[i] <- PBKtools::PBKOF(list(data_df[1,i+1]), list(results[1,i]))
# }
# average_score <- mean(score)
# Transform predictions and exp_data in list data type
# Transform predictions and exp_data in list data type
observations <- list()
predictions <- list()
data_df
# score <- c()
# # Estimate WSSR for every output variable with available data
# for (i in 1:length(output_variables)) {
#   #score[i] <- PBKtools::WSSR(list(data_df[1,i+1]), list(results[1,i]), list(errors_df[1,i+1]))
#   score[i] <- PBKtools::PBKOF(list(data_df[1,i+1]), list(results[1,i]))
# }
# average_score <- mean(score)
# Transform predictions and exp_data in list data type
# Transform predictions and exp_data in list data type
observations <- list()
predictions <- list()
for (i in 2:dim(data_df)[2]) {
observations[[i-1]] <- data_df[,i]
names(observations)[i-1] <- colnames(data_df)[i]
predictions[[i-1]] <- predictions_df[,i]*1000 # transform from ug/g to ug/kg
names(predictions)[i-1] <- colnames(predictions_df)[i]
}
for (i in 2:dim(data_df)[2]) {
observations[[i-1]] <- data_df[,i]
names(observations)[i-1] <- colnames(data_df)[i]
predictions[[i-1]] <- results[,i]*1000 # transform from ug/g to ug/kg
names(predictions)[i-1] <- colnames(results)[i]
}
observations
predictions
data_df
observations
score <- PBKOF(observations,predictions)
score <- PBKtools::PBKOF(observations,predictions)
score
errors_df
?PBKtools::WSSR
weights_list <- list()
errors_df
data_df
for (i in 2:dim(data_df)[2]) {
observations[[i-1]] <- data_df[,i]
names(observations)[i-1] <- colnames(data_df)[i]
predictions[[i-1]] <- results[,i]*1000 # transform from ug/g to ug/kg
names(predictions)[i-1] <- colnames(results)[i]
weights_list[[i-1]] <- errors_df[,i]
names(weights_list)[i-1] <- colnames(errors_df)[i]
}
weights_list
score <- PBKtools::WSSR(observations,predictions,weights_list)
names(observed)
names(observations)
# score <- c()
# # Estimate WSSR for every output variable with available data
# for (i in 1:length(output_variables)) {
#   #score[i] <- PBKtools::WSSR(list(data_df[1,i+1]), list(results[1,i]), list(errors_df[1,i+1]))
#   score[i] <- PBKtools::PBKOF(list(data_df[1,i+1]), list(results[1,i]))
# }
# average_score <- mean(score)
# Transform predictions and exp_data in list data type
# Transform predictions and exp_data in list data type
observations <- list()
predictions <- list()
weights_list <- list()
for (i in 2:dim(data_df)[2]) {
observations[[i-1]] <- data_df[,i]
names(observations)[i-1] <- colnames(data_df)[i]
predictions[[i-1]] <- results[,i]*1000 # transform from ug/g to ug/kg
names(predictions)[i-1] <- colnames(results)[i]
weights_list[[i-1]] <- errors_df[,i]
names(weights_list)[i-1] <- colnames(errors_df)[i]
}
score <- PBKtools::WSSR(observations,predictions,weights_list)
observed=observations
predicted = predictions
predictions
weights
weights_values = weights_list
weights_values
# Check if the user provided the correct input format
if (!is.list(observed) || !is.list(predicted) || !is.list(weights_values)){
stop(" The observations, predictions and weights_values must be lists")
}
# Check if the user provided equal length lists
if (length(observed) != length(predicted) || length(observed) != length(weights_values)){
stop(" The observations, predictions and weights_values must have the same compartments")
}
# Define the number of observed outputs
N_outputs <- length(predicted)
N_outputs
# Define the number of observations per output
N_obs <- rep(NA, N_outputs)
N_obs
# A vector to store the values of the weighted squared sum residuals of each compartment
outputs_res <- c()
i=1
N_obs[i] <- length(observed[[i]])
N_obs
# Check that all observed, predicted and weights_values vectors have the same length
if(N_obs[i] != length(predicted[[i]]) || N_obs[i] != length(weights_values[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
# The number of observations for output i
N <- N_obs[i]
N
# Initiate a variable to estimate the sum of squared residuals for output j
sq_weighted_res_j <- 0
for (j in 1:N) { #loop over the experimental points i compartment i
sq_weighted_res_j <- sq_weighted_res_j + ((observed[[i]][j] - predicted[[i]][j]) / weights_values[[i]][j])^2
}
outputs_res[i] <- sq_weighted_res_j
for (i in 1:N_outputs) { # loop over the observed outputs
N_obs[i] <- length(observed[[i]])
# Check that all observed, predicted and weights_values vectors have the same length
if(N_obs[i] != length(predicted[[i]]) || N_obs[i] != length(weights_values[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
# The number of observations for output i
N <- N_obs[i]
# Initiate a variable to estimate the sum of squared residuals for output j
sq_weighted_res_j <- 0
for (j in 1:N) { #loop over the experimental points i compartment i
sq_weighted_res_j <- sq_weighted_res_j + ((observed[[i]][j] - predicted[[i]][j]) / weights_values[[i]][j])^2
}
outputs_res[i] <- sq_weighted_res_j
}
outputs_res
WSSR_results <- sum(outputs_res)
WSSR_results
#' Weighted Sum of Squared Residuals
#'
#' Estimates the weighted sum of squared residuals.
#'
#' @param  observed list with the observed values
#' @param predicted list with the predicted values
#' @param weights_values list with the weights
#' @export
WSSR <- function(observed, predicted, weights_values, comp.names =NULL){
# Check if the user provided the correct input format
if (!is.list(observed) || !is.list(predicted) || !is.list(weights_values)){
stop(" The observations, predictions and weights_values must be lists")
}
# Check if the user provided equal length lists
if (length(observed) != length(predicted) || length(observed) != length(weights_values)){
stop(" The observations, predictions and weights_values must have the same compartments")
}
# Define the number of observed outputs
N_outputs <- length(predicted)
# Define the number of observations per output
N_obs <- rep(NA, N_outputs)
# A vector to store the values of the weighted squared sum residuals of each compartment
outputs_res <- c()
for (i in 1:N_outputs) { # loop over the observed outputs
N_obs[i] <- length(observed[[i]])
# Check that all observed, predicted and weights_values vectors have the same length
if(N_obs[i] != length(predicted[[i]]) || N_obs[i] != length(weights_values[[i]])){
stop(paste0("Compartment ",i," had different length in the observations and predictions"))
}
# The number of observations for output i
N <- N_obs[i]
# Initiate a variable to estimate the sum of squared residuals for output j
sq_weighted_res_j <- 0
for (j in 1:N) { #loop over the experimental points i compartment i
sq_weighted_res_j <- sq_weighted_res_j + ((observed[[i]][j] - predicted[[i]][j]) / weights_values[[i]][j])^2
}
outputs_res[i] <- sq_weighted_res_j
}
WSSR_results <- sum(outputs_res)
return(WSSR_results)
}
score <- WSSR(observations,predictions,weights_list)
score <- WSSR(observations,predictions,weights_list)
score
PBKtools::PBKOF(observations,predictions)
score
setwd('/Users/vassilis/Documents/GitHub/PBK_modelling_tools/PBKtools')
devtools::document()
setwd('/Users/vassilis/Documents/GitHub/PBK_modelling_tools/PBKtools')
devtools::document()
warnings()
PBKtools::WSSR()
?PBKtools::WSSR()
setwd('..')
devtools::install('PBKtools')
getwd()
devtools::install('PBKtools')
